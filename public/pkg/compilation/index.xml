<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Compilation on Errors in Go - Learn how to fix common errors in Go</title>
    <link>https://errorsingo.com/pkg/compilation/</link>
    <description>Recent content in Compilation on Errors in Go - Learn how to fix common errors in Go</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 29 Apr 2018 13:39:40 -0400</lastBuildDate>
    
	<atom:link href="https://errorsingo.com/pkg/compilation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>this-is-not-used</title>
      <link>https://errorsingo.com/compliation-no-new-variables-on-left-side-of/</link>
      <pubDate>Sun, 29 Apr 2018 13:39:40 -0400</pubDate>
      
      <guid>https://errorsingo.com/compliation-no-new-variables-on-left-side-of/</guid>
      <description>What causes the error? This error means that you are trying to use Go&amp;rsquo;s short form variable declaration (a := &amp;quot;some-value&amp;quot;) when the variable has already been declared.
The most common cause of this compilation error is when you have a variable declared via short form declaration and then add a new line of code before that line which adds a new declaration. This is much clearer with an example.</description>
    </item>
    
    <item>
      <title>this-is-not-used</title>
      <link>https://errorsingo.com/compilation-undefined-variable/</link>
      <pubDate>Sun, 29 Apr 2018 13:39:21 -0400</pubDate>
      
      <guid>https://errorsingo.com/compilation-undefined-variable/</guid>
      <description>What causes the error? This error is caused when a variable isn&amp;rsquo;t defined before attempting to assign it a value. This can commonly happen when you forget to use the short declaration form&amp;rsquo;s colon (:), or when you previously defined a variable and then later removed that declaration. For instance, imagine you had this code:
err := doStuff() if err != nil { // handle the err } err = doMoreStuff() if err !</description>
    </item>
    
    <item>
      <title>this-is-not-used</title>
      <link>https://errorsingo.com/compilation-invalid-identifier-u201c/</link>
      <pubDate>Fri, 09 Feb 2018 18:14:37 -0500</pubDate>
      
      <guid>https://errorsingo.com/compilation-invalid-identifier-u201c/</guid>
      <description>What causes the error? This error, and many other invalid identifier errors like it, stem from using an invalid character in your Go code. In this particular case, the issue stems from those weird curved quotation marks - “ and ” - which are different from the quotation marks you normally type. An example is shown below.
func main() { // this line cause a compilation error fmt.Println(“test”) }   Run it on the Go Playground → https://play.</description>
    </item>
    
    <item>
      <title>this-is-not-used</title>
      <link>https://errorsingo.com/compilation-invalid-identifier-u201d/</link>
      <pubDate>Fri, 09 Feb 2018 18:14:37 -0500</pubDate>
      
      <guid>https://errorsingo.com/compilation-invalid-identifier-u201d/</guid>
      <description>What causes the error? This error, and many other invalid identifier errors like it, stem from using an invalid character in your Go code. In this particular case, the issue stems from those weird curved quotation marks - “ and ” - which are different from the quotation marks you normally type. An example is shown below.
func main() { // this line cause a compilation error fmt.Println(“test”) }   Run it on the Go Playground → https://play.</description>
    </item>
    
  </channel>
</rss>